#!/bin/bash

# ======================
# üîß AZTEC PROVER - MENU
# ======================

IMAGE="aztecprotocol/aztec:0.87.8"
NETWORK="alpha-testnet"
DEFAULT_DATA_DIR="/root/aztec-prover"
DATA_DIR="$DEFAULT_DATA_DIR"
DEFAULT_P2P_PORT="40400"
DEFAULT_API_PORT="8080"

# Logo
curl -s https://raw.githubusercontent.com/vnbnode/binaries/main/Logo/logo.sh | bash && sleep 1

install_dependencies() {
  local MARKER="/usr/local/bin/.aztec_deps_installed"

  if [ -f "$MARKER" ]; then
    echo "‚úÖ C√°c g√≥i dependencies ƒë√£ ƒë∆∞·ª£c c√†i tr∆∞·ªõc ƒë√≥. B·ªè qua..."
    return
  fi

  echo "üîß ƒêang c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt..."
  apt-get update && apt-get upgrade -y
  apt-get install -y screen curl iptables build-essential git wget lz4 jq make gcc nano automake autoconf \
    tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip fzf

  echo "üì¶ ƒêang c√†i ƒë·∫∑t Node.js 22.x v√† Yarn..."
  curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
  apt-get install -y nodejs
  npm install -g yarn

  touch "$MARKER"
  echo "‚úÖ Ho√†n t·∫•t c√†i ƒë·∫∑t dependencies!"
}

compose_cmd() {
  if command -v docker &>/dev/null && docker compose version &>/dev/null; then
    echo "docker compose"
  elif command -v docker-compose &>/dev/null; then
    echo "docker-compose"
  else
    return 1
  fi
}

check_and_install_docker() {
  local MARKER="/usr/local/bin/.aztec_docker_installed"

  if [ -f "$MARKER" ]; then
    echo "‚úÖ Docker v√† Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua..."
    return
  fi

  if ! compose_cmd &>/dev/null; then
    echo "üîß Docker Compose ch∆∞a c√≥. ƒêang c√†i ƒë·∫∑t..."
    bash <(curl -s https://raw.githubusercontent.com/vnbnode/binaries/main/docker-install.sh)

    if ! compose_cmd &>/dev/null; then
      echo "‚ùå C√†i ƒë·∫∑t Docker Compose th·∫•t b·∫°i. Tho√°t..."
      exit 1
    fi
  fi

  systemctl enable docker && systemctl start docker
  touch "$MARKER"
  echo "‚úÖ ƒê√£ c√†i ƒë·∫∑t Docker v√† Docker Compose!"
}


# üöÄ C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
install_dependencies
check_and_install_docker

load_env_or_prompt() {
  WAN_IP=$(curl -s ifconfig.me)

  declare -A ICONS=(
    ["IMAGE"]="üñºÔ∏è " ["NETWORK"]="ü™ê" ["WAN_IP"]="üåê"
    ["P2P_PORT"]="üîå" ["API_PORT"]="üß©" ["RPC_SEPOLIA"]="üõ∞Ô∏è "
    ["BEACON_SEPOLIA"]="üì°" ["PRIVATE_KEY"]="üîê" ["PROVER_ID"]="üíº"
    ["AGENT_COUNT"]="üë∑" ["DATA_DIR"]="üìÇ"
  )

  is_valid_input() {
    local input="$1"
    echo "$input" | iconv -f UTF-8 -t ASCII//TRANSLIT &>/dev/null
  }

  prompt_input() {
    local key="$1" prompt="$2" default="$3" secret="$4" input rc
    while true; do
      if [[ "$secret" == "true" ]]; then
        read -s -p "$prompt" input
        rc=$?
        echo
      else
        read -p "$prompt" input
        rc=$?
      fi
      if [[ $rc -ne 0 ]]; then
        return 130  # Ctrl+C or ESC ‚Üí return special
      fi
      input="${input:-$default}"
      input="$(echo -n "$input" | tr -d '\r\n')"
      [[ -z "$input" ]] && echo "‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." && continue
      if is_valid_input "$input" || [[ "$key" == "PRIVATE_KEY" || "$key" == "PROVER_ID" ]]; then
        echo "$input"
        return 0
      else
        echo "‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá (ch·ªâ d√πng k√Ω t·ª± kh√¥ng d·∫•u)."
      fi
    done
  }

  find_env_file() {
    local SEARCH_DIRS=(/)
    for base in "${SEARCH_DIRS[@]}"; do
      while IFS= read -r path; do
        if [[ -f "$path/.env" ]]; then
          ENV_FILE="$path/.env"
          DATA_DIR="$path"
          echo "üìÑ ƒê√£ ph√°t hi·ªán .env t·∫°i $ENV_FILE, ƒëang t·∫£i..."
          source "$ENV_FILE"
          export DATA_DIR
          return 0
        fi
      done < <(find "$base" -type d -name "aztec-prover" 2>/dev/null)
    done
    return 1
  }

  edit_env_variables() {
  echo -e "\nüîÑ .env hi·ªán t·∫°i:"
  for i in "${!env_lines[@]}"; do
    key="${env_lines[$i]%%=*}"
    val="${env_lines[$i]#*=}"
    [[ "$key" == "PRIVATE_KEY" ]] && val="********"
    icon="${ICONS[$key]}"
    printf "%2d. %-20s %s  = %s\n" "$((i+1))" "$key" "$icon" "$val"
  done

  echo ""
  CHOICE=$(printf "‚úÖ C√≥\n‚ùå Kh√¥ng" | fzf --prompt="üîÅ B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a c√°c bi·∫øn m√¥i tr∆∞·ªùng? " --height=10 --reverse)
  rc=$?
  if [[ $rc -eq 130 ]]; then
    echo "‚è™ Hu·ª∑ ch·ªçn. Quay l·∫°i menu ch√≠nh..."
    return 130
  elif [[ $rc -ne 0 || "$CHOICE" != "‚úÖ C√≥" ]]; then
    echo "üîô Kh√¥ng ch·ªânh s·ª≠a bi·∫øn m√¥i tr∆∞·ªùng. Ti·∫øp t·ª•c..."
    return 0
  fi

  trap 'echo -e "\n‚è™ ƒê√£ hu·ª∑ thao t√°c. Quay l·∫°i menu ch√≠nh..."; return 130' SIGINT

  while true; do
    echo ""
    display_lines=()
    for line in "${env_lines[@]}"; do
      key="${line%%=*}"
      val="${line#*=}"
      [[ "$key" == "PRIVATE_KEY" ]] && val="********"
      icon="${ICONS[$key]}"
      display_lines+=("$(printf "%-4s %-20s = %s" "$icon" "$key" "$val")")
    done

    selected=$(printf "%s\n" "${display_lines[@]}" "üíæ L∆∞u v√† ti·∫øp t·ª•c" | fzf --prompt="üîß Ch·ªçn bi·∫øn: " --height=40% --reverse)
    rc=$?

    if [[ $rc -ne 0 ]]; then
      echo "‚è™ Hu·ª∑ ch·ªânh s·ª≠a. Quay l·∫°i menu ch√≠nh..."
      trap - SIGINT
      return 130
    elif [[ "$selected" == "üíæ L∆∞u v√† ti·∫øp t·ª•c" ]]; then
      break
    fi

    key=$(echo "$selected" | sed -E 's/^[^ ]+ +([^ ]+).*/\1/')

    for i in "${!env_lines[@]}"; do
      if [[ "${env_lines[$i]%%=*}" == "$key" ]]; then
        old_val="${env_lines[$i]#*=}"
        if [[ "$key" == "PRIVATE_KEY" ]]; then
          if ! new_val=$(prompt_input "$key" "üîê Nh·∫≠p gi√° tr·ªã m·ªõi cho $key (hi·ªán t·∫°i: $old_val): " "$old_val" true); then
            echo "‚Ü©Ô∏è Hu·ª∑ nh·∫≠p. Quay l·∫°i menu ch·ªçn bi·∫øn..."
            continue 2  # Quay l·∫°i menu ch·ªçn bi·∫øn
          fi
        else
          if ! new_val=$(prompt_input "$key" "üîß Nh·∫≠p gi√° tr·ªã m·ªõi cho $key (hi·ªán t·∫°i: $old_val): " "$old_val"); then
            echo "‚Ü©Ô∏è Hu·ª∑ nh·∫≠p. Quay l·∫°i menu ch·ªçn bi·∫øn..."
            continue 2  # Quay l·∫°i menu ch·ªçn bi·∫øn
          fi
        fi
        env_lines[$i]="$key=$new_val"
        break
      fi
    done
  done

  trap - SIGINT
  return 0
}

  backup_and_save_env() {
    echo ""
    if [[ -f "$ENV_FILE" ]]; then
      BACKUP_NAME="$ENV_FILE.bak_$(date +%Y%m%d_%H%M%S)"
      cp "$ENV_FILE" "$BACKUP_NAME"
      echo "üõ°Ô∏è ƒê√£ sao l∆∞u .env th√†nh: $BACKUP_NAME"
      export ENV_BACKUP_FILE="$BACKUP_NAME"
      ls -1t "$ENV_FILE".bak_* 2>/dev/null | tail -n +2 | xargs -r rm -f
    else
      unset ENV_BACKUP_FILE
    fi

    echo "üíæ ƒêang ghi t·ªáp .env..."
    {
      for line in "${env_lines[@]}"; do
        key="${line%%=*}"; val="${line#*=}"
        echo "${key}=$(echo -n "$val" | tr -d '\r\n')"
      done
    } > "$ENV_FILE"

    dos2unix "$ENV_FILE" 2>/dev/null
    source "$ENV_FILE"
    export DATA_DIR
  }

  ### --- MAIN --- ###
  if ! find_env_file; then
    DEFAULT_DATA_DIR="/root/aztec-prover"
    INPUT_DIR=$(prompt_input "DATA_DIR" "üìÇ Nh·∫≠p th∆∞ m·ª•c l∆∞u d·ªØ li·ªáu [m·∫∑c ƒë·ªãnh: $DEFAULT_DATA_DIR]: " "$DEFAULT_DATA_DIR") || return 130
    DATA_DIR="$INPUT_DIR"
    mkdir -p "$DATA_DIR"
    ENV_FILE="$DATA_DIR/.env"
  fi

  if [[ -f "$ENV_FILE" ]]; then
    source "$ENV_FILE"
    env_lines=(
      "IMAGE=${IMAGE:-aztecprotocol/aztec:0.87.8}"
      "NETWORK=${NETWORK:-alpha-testnet}"
      "WAN_IP=${WAN_IP:-$WAN_IP}"
      "P2P_PORT=${P2P_PORT:-40400}"
      "API_PORT=${API_PORT:-8080}"
      "RPC_SEPOLIA=${RPC_SEPOLIA:-}"
      "BEACON_SEPOLIA=${BEACON_SEPOLIA:-}"
      "PRIVATE_KEY=${PRIVATE_KEY:-}"
      "PROVER_ID=${PROVER_ID:-}"
      "AGENT_COUNT=${AGENT_COUNT:-1}"
      "DATA_DIR=${DATA_DIR}"
    )
    if ! edit_env_variables; then
      return 130  # Quay l·∫°i menu ch√≠nh
    fi
  else
    echo "üìÑ T·∫°o file .env m·ªõi..."
    IMAGE=$(prompt_input "IMAGE" "üñºÔ∏è  Nh·∫≠p Docker image [m·∫∑c ƒë·ªãnh: aztecprotocol/aztec:0.87.8]: " "aztecprotocol/aztec:0.87.8") || return 130
    NETWORK=$(prompt_input "NETWORK" "ü™ê Nh·∫≠p network [m·∫∑c ƒë·ªãnh: alpha-testnet]: " "alpha-testnet") || return 130
    RPC_SEPOLIA=$(prompt_input "RPC_SEPOLIA" "üõ∞Ô∏è  Nh·∫≠p Sepolia RPC URL: " "") || return 130
    BEACON_SEPOLIA=$(prompt_input "BEACON_SEPOLIA" "üì° Nh·∫≠p Beacon API URL: " "") || return 130
    PRIVATE_KEY=$(prompt_input "PRIVATE_KEY" "üîê Nh·∫≠p Publisher Private Key: " "" true) || return 130
    PROVER_ID=$(prompt_input "PROVER_ID" "üíº Nh·∫≠p Prover ID: ") || return 130
    AGENT_COUNT=$(prompt_input "AGENT_COUNT" "üë∑ Nh·∫≠p s·ªë agent [m·∫∑c ƒë·ªãnh: 1]: " "1") || return 130
    P2P_PORT=$(prompt_input "P2P_PORT" "üîå Nh·∫≠p P2P Port [m·∫∑c ƒë·ªãnh: 40400]: " "40400") || return 130
    API_PORT=$(prompt_input "API_PORT" "üß© Nh·∫≠p API Port [m·∫∑c ƒë·ªãnh: 8080]: " "8080") || return 130

    env_lines=(
      "IMAGE=$IMAGE" "NETWORK=$NETWORK" "WAN_IP=$WAN_IP"
      "P2P_PORT=$P2P_PORT" "API_PORT=$API_PORT"
      "RPC_SEPOLIA=$RPC_SEPOLIA" "BEACON_SEPOLIA=$BEACON_SEPOLIA"
      "PRIVATE_KEY=$PRIVATE_KEY" "PROVER_ID=$PROVER_ID"
      "AGENT_COUNT=$AGENT_COUNT" "DATA_DIR=$DATA_DIR"
    )
  fi

  backup_and_save_env

  [[ ! -d "$DATA_DIR" ]] && echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ªØ li·ªáu: $DATA_DIR" && return 1
  return 0
}

cleanup_old_agents() {
  if [[ -z "$ENV_BACKUP_FILE" || ! -f "$ENV_BACKUP_FILE" ]]; then
    echo "‚ÑπÔ∏è Kh√¥ng c√≥ file backup .env ƒë·ªÉ ki·ªÉm tra agent c≈©."
    return
  fi

  OLD_AGENT_COUNT=$(grep "^AGENT_COUNT=" "$ENV_BACKUP_FILE" | cut -d= -f2)
  if [[ -z "$OLD_AGENT_COUNT" || "$OLD_AGENT_COUNT" -le 0 ]]; then
    echo "‚ÑπÔ∏è AGENT_COUNT c≈© kh√¥ng h·ª£p l·ªá trong $ENV_BACKUP_FILE."
    return
  fi

  echo "‚ôªÔ∏è ƒêang d·ª´ng v√† xo√° $OLD_AGENT_COUNT agent c≈© t·ª´ file backup..."

  for i in $(seq 1 "$OLD_AGENT_COUNT"); do
    container_name="agent_$i"
    echo "üõë D·ª´ng v√† xo√° container: $container_name"
    docker stop "$container_name" 2>/dev/null
    docker rm "$container_name" 2>/dev/null
  done
}

generate_compose() {
  mkdir -p "$DATA_DIR"  # üõ†Ô∏è ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i tr∆∞·ªõc
  COMPOSE_FILE="$DATA_DIR/docker-compose.yml"

  cat > "$COMPOSE_FILE" <<EOF
version: '3.8'
services:
  prover_node:
    image: $IMAGE
    container_name: prover_node
    restart: unless-stopped
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-node --archiver --network $NETWORK'
    depends_on:
      broker:
        condition: service_started
    env_file:
      - .env
    environment:
      P2P_IP: "\${WAN_IP}"
      P2P_ANNOUNCE_ADDRESSES: "/ip4/\${WAN_IP}/tcp/\${P2P_PORT}"
      ETHEREUM_HOSTS: "\${RPC_SEPOLIA}"
      L1_CONSENSUS_HOST_URLS: "\${BEACON_SEPOLIA}"
      PROVER_PUBLISHER_PRIVATE_KEY: "\${PRIVATE_KEY}"
      PROVER_ENABLED: "true"
      P2P_ENABLED: "true"
      P2P_TCP_PORT: "\${P2P_PORT}"
      P2P_UDP_PORT: "\${P2P_PORT}"
      DATA_STORE_MAP_SIZE_KB: "134217728"
      LOG_LEVEL: "debug"
      PROVER_BROKER_HOST: "http://broker:\${API_PORT}"
    ports:
      - "\${API_PORT}:\${API_PORT}"
      - "\${P2P_PORT}:\${P2P_PORT}"
      - "\${P2P_PORT}:\${P2P_PORT}/udp"
    volumes:
      - \${DATA_DIR}/node:/data

  broker:
    image: $IMAGE
    container_name: broker
    restart: unless-stopped
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-broker --network $NETWORK'
    env_file:
      - .env
    environment:
      DATA_DIRECTORY: /data
      ETHEREUM_HOSTS: "\${RPC_SEPOLIA}"
      LOG_LEVEL: "debug"
    volumes:
      - \${DATA_DIR}/broker:/data
EOF

  for i in $(seq 1 "$AGENT_COUNT"); do
    cat >> "$COMPOSE_FILE" <<EOF

  agent_$i:
    image: $IMAGE
    container_name: agent_$i
    restart: unless-stopped
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-agent --network $NETWORK'
    env_file:
      - .env
    environment:
      PROVER_ID: "\${PROVER_ID}"
      PROVER_BROKER_HOST: "http://broker:\${API_PORT}"
      PROVER_AGENT_POLL_INTERVAL_MS: "10000"
    depends_on:
      - broker
EOF
  done
}

install_prover() {
  echo "üöÄ ƒêang c√†i ƒë·∫∑t Aztec Prover..."

  load_env_or_prompt || return 1
  cleanup_old_agents  # ‚úÖ G·ªåI SAU KHI .env ƒê∆Ø·ª¢C BACKUP

  generate_compose

  cd "$DATA_DIR" || { echo "‚ùå Kh√¥ng th·ªÉ cd v√†o $DATA_DIR"; return 1; }

  echo "üß± D·ª´ng c√°c container c≈© (n·∫øu c√≥)..."
  $(compose_cmd) down

  echo "üöÄ Kh·ªüi ƒë·ªông Aztec Prover..."
  $(compose_cmd) up -d

  echo "‚úÖ ƒê√£ kh·ªüi ƒë·ªông c√°c container th√†nh c√¥ng"
}

view_logs() {
  echo "üìú Running Aztec Prover Logs..."

  # T√¨m th∆∞ m·ª•c aztec-prover c√≥ ch·ª©a .env trong /
  for path in /; do
    match=$(find "$path" -type d -name "aztec-prover" -exec test -f "{}/.env" \; -print 2>/dev/null | head -n 1)
    if [[ -n "$match" ]]; then
      DATA_DIR="$match"
      break
    fi
  done

  if [[ -z "$DATA_DIR" ]]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c aztec-prover ch·ª©a .env trong /"
    return
  fi

  ENV_PATH="$DATA_DIR/.env"
  source "$ENV_PATH"

  if [ ! -d "$DATA_DIR" ]; then
    echo "‚ùå DATA_DIR kh√¥ng t·ªìn t·∫°i: $DATA_DIR"
    return
  fi

  cd "$DATA_DIR" || { echo "‚ùå Kh√¥ng th·ªÉ cd v√†o $DATA_DIR"; return; }

  # L·∫•y danh s√°ch container ƒëang ch·∫°y
  CONTAINERS=$(docker ps --format "{{.Names}}" || true)
  HAS_PROVER=$(echo "$CONTAINERS" | grep -E "^(prover_node|broker)$" || true)
  HAS_AGENTS=$(echo "$CONTAINERS" | grep -E "^agent_[0-9]+$" || true)

  if [ -z "$CONTAINERS" ]; then
    echo "‚ùå Kh√¥ng c√≥ container n√†o ƒëang ch·∫°y!"
    return
  fi

  # X√°c ƒë·ªãnh docker compose command
  CMD=$(compose_cmd)

  while true; do
    OPTIONS=""
    [ -n "$HAS_PROVER" ] && OPTIONS+="üîé Logs c·ªßa prover_node & broker\n"
    [ -n "$HAS_AGENTS" ] && OPTIONS+="üßë‚ÄçüöÄ Logs c·ªßa c√°c agent_*\n"
    OPTIONS+="üßæ View all logs"

    SELECTED=$(echo -e "$OPTIONS" | fzf --height=12 --border --prompt="üîç Ch·ªçn c√°ch xem logs: " --reverse) || return

    case "$SELECTED" in
      "üîé Logs c·ªßa prover_node & broker")
        (
          colors=(35 36)
          i=0
          pids=()
          for name in prover_node broker; do
            if docker ps --format '{{.Names}}' | grep -qx "$name"; then
              color=${colors[$i]}
              docker logs --tail=100 -f "$name" 2>&1 \
                | sed -u "s/^/\x1b[1;${color}m[$name]\x1b[0m /" &
              pids+=($!)
            fi
            ((i++))
          done
          trap 'kill "${pids[@]}" 2>/dev/null' SIGINT
          wait
        )
        ;;
      "üßë‚ÄçüöÄ Logs c·ªßa c√°c agent_*")
        (
          colors=(31 32 33 34 35 36 91 92 93 94)
          i=0
          pids=()
          for container in $HAS_AGENTS; do
            color=${colors[$((i % ${#colors[@]}))]}
            docker logs --tail=100 -f "$container" 2>&1 \
              | sed -u "s/^/\x1b[1;${color}m[$container]\x1b[0m /" &
            pids+=($!)
            ((i++))
          done
          trap 'kill "${pids[@]}" 2>/dev/null' SIGINT
          wait
        )
        ;;
      "üßæ View all logs")
        $CMD -f "$DATA_DIR/docker-compose.yml" logs --tail=100 -f
        ;;
    esac
  done
}

find_compose_dir() {
  local SEARCH_DIRS=(/)
  local MODE="${1:-compose}"  # "compose" ho·∫∑c "data"

  for base in "${SEARCH_DIRS[@]}"; do
    while IFS= read -r aztec_path; do
      case "$MODE" in
        compose)
          if [[ -f "$aztec_path/docker-compose.yml" ]]; then
            echo "$aztec_path"
            return 0
          fi
          ;;
        data)
          if [[ -d "$aztec_path/node" && -d "$aztec_path/broker" ]]; then
            echo "$aztec_path"
            return 0
          fi
          ;;
      esac
    done < <(find "$base" -type d -name "aztec-prover" 2>/dev/null)
  done

  return 1
}

delete_prover() {
  echo "‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° container Prover kh√¥ng?"
  CHOICE=$(printf "‚úÖ C√≥\n‚ùå Kh√¥ng" | fzf --prompt="üëâ Ch·ªçn: " --height=6 --border --reverse)
  [[ "$CHOICE" != "‚úÖ C√≥" ]] && { echo "‚ùé ƒê√£ hu·ª∑ thao t√°c xo√°."; return; }

  DATA_DIR=$(find_compose_dir) || { echo "‚ùå Kh√¥ng t√¨m th·∫•y docker-compose.yml c·ªßa aztec-prover."; return 1; }
  echo "üìÇ Ph√°t hi·ªán th∆∞ m·ª•c Aztec Prover t·∫°i: $DATA_DIR"

  cd "$DATA_DIR" || { echo "‚ùå Kh√¥ng th·ªÉ truy c·∫≠p $DATA_DIR"; return 1; }

  ENV_FILE="$DATA_DIR/.env"
  cleanup_old_agents  # ‚úÖ G·ªåI H√ÄM N√ÄY TR∆Ø·ªöC KHI XO√Å TO√ÄN B·ªò

  $(compose_cmd) down -v
  echo "üßπ ƒê√£ xo√° container Prover."
}

reset_prover() {
  echo "üí£ B·∫°n s·∫Øp xo√° to√†n b·ªô container v√† d·ªØ li·ªáu!"
  CHOICE=$(printf "‚úÖ C√≥, reset to√†n b·ªô\n‚ùå Kh√¥ng" | fzf --prompt="üëâ Ch·ªçn: " --height=6 --border --reverse)

  if [[ "$CHOICE" == "‚úÖ C√≥, reset to√†n b·ªô" ]]; then
    delete_prover

    # T√¨m l·∫°i th∆∞ m·ª•c ch·ª©a c·∫£ node & broker
    DATA_DIR=$(find_compose_dir data) || {
      echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ch·ª©a node v√† broker trong aztec-prover."
      return 1
    }

    echo "üßπ ƒêang xo√° th∆∞ m·ª•c /node v√† /broker trong $DATA_DIR"
    rm -rf "$DATA_DIR/node" "$DATA_DIR/broker"
    echo "‚úÖ Reset ho√†n t·∫•t. ƒê√£ gi·ªØ l·∫°i c√°c file .env v√† docker-compose.yml trong $DATA_DIR"
  else
    echo "‚ùé ƒê√£ hu·ª∑ thao t√°c reset."
  fi
}

# ---------- Menu ----------
while true; do
  echo ""
  echo "=============================="
  echo "üõ† AZTEC PROVER DEPLOYMENT TOOL"
  echo "=============================="

  OPTION=$(printf \
"üöÄ C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Prover\n\
üìú Xem logs\n\
üßπ Xo√° Prover\n\
üí£ Xo√° to√†n b·ªô d·ªØ li·ªáu (reset)\n\
‚ùå Tho√°t" | fzf --height=12 --border --prompt="üëâ Ch·ªçn t√πy ch·ªçn: " --ansi --reverse)

  # N·∫øu ng∆∞·ªùi d√πng b·∫•m ESC ho·∫∑c Ctrl+C, tho√°t menu lu√¥n
  if [[ $? -ne 0 ]]; then
    echo "üëã Tho√°t..."
    exit 0
  fi

  case "$OPTION" in
    "üöÄ C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Prover") install_prover ;;
    "üìú Xem logs") view_logs ;;
    "üßπ Xo√° Prover") delete_prover ;;
    "üí£ Xo√° to√†n b·ªô d·ªØ li·ªáu (reset)") reset_prover ;;
    "‚ùå Tho√°t") echo "üëã T·∫°m bi·ªát!"; exit 0 ;;
    *) echo "‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá!" ;;
  esac
done
