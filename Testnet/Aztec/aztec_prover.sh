#!/bin/bash

# ======================
# üîß AZTEC PROVER - MENU
# ======================

IMAGE="aztecprotocol/aztec:0.87.8"
NETWORK="alpha-testnet"
DEFAULT_DATA_DIR="/root/aztec-prover"
DEFAULT_P2P_PORT="40400"
DEFAULT_API_PORT="8080"

# Logo
echo -e "\033[0;35m"
echo "//==========================================================================\\"
echo "||‚ñë‚ñà‚ñà‚ïê‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïê‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïê‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë||"
echo "||‚ñë‚ñë‚ñà‚ñà‚ïö‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ñà‚ïù‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê ‚ñà‚ñà‚ïö‚ïó‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë||"
echo "||‚ñë‚ñë‚ñë‚ñà‚ñà‚ïö‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë||"  
echo "||‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïö‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïö‚ïê‚ïê ‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë||"
echo "||‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë||"
echo "||‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë||"
echo "\\==========================================================================//"
echo -e "\e[0m"
sleep 3

install_dependencies() {
  echo "üîß ƒêang c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt..."
  apt-get update && apt-get upgrade -y
  apt install -y screen curl iptables build-essential git wget lz4 jq make gcc nano automake autoconf \
    tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip fzf

  curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
  apt-get install -y nodejs
  npm install -g yarn
}

compose_cmd() {
  if command -v docker &>/dev/null && docker compose version &>/dev/null; then
    echo "docker compose"
  elif command -v docker-compose &>/dev/null; then
    echo "docker-compose"
  else
    return 1
  fi
}

check_and_install_docker() {
  if ! compose_cmd &>/dev/null; then
    echo "üîß Docker Compose ch∆∞a c√≥. ƒêang c√†i ƒë·∫∑t..."
    source <(curl -s https://raw.githubusercontent.com/vnbnode/binaries/main/docker-install.sh)

    # Ki·ªÉm tra l·∫°i sau khi c√†i
    if ! compose_cmd &>/dev/null; then
      echo "‚ùå C√†i ƒë·∫∑t Docker Compose th·∫•t b·∫°i. Tho√°t..."
      exit 1
    fi
  else
    echo "‚úÖ Docker Compose ƒë√£ s·∫µn s√†ng."
  fi
}

load_env_or_prompt() {
  # T·ª± ƒë·ªông c√†i fzf n·∫øu ch∆∞a c√≥
  command -v fzf >/dev/null 2>&1 || {
    echo "üì¶ ƒêang c√†i ƒë·∫∑t fzf..."
    apt update -y && apt install fzf -y
  }

  ENV_FILE="$DEFAULT_DATA_DIR/.env"
  WAN_IP=$(curl -s ifconfig.me)

  declare -A ICONS=(
    ["IMAGE"]="üñºÔ∏è "
    ["NETWORK"]="ü™ê"
    ["WAN_IP"]="üåê"
    ["P2P_PORT"]="üîå"
    ["API_PORT"]="üß©"
    ["RPC_SEPOLIA"]="üõ∞Ô∏è "
    ["BEACON_SEPOLIA"]="üì°"
    ["PRIVATE_KEY"]="üîê"
    ["PROVER_ID"]="ü™™ "
    ["AGENT_COUNT"]="üë∑"
    ["DATA_DIR"]="üìÇ"
  )

  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
    IMAGE="${IMAGE:-aztecprotocol/aztec:0.87.8}"
    NETWORK="${NETWORK:-alpha-testnet}"

    env_lines=(
      "IMAGE=$IMAGE"
      "NETWORK=$NETWORK"
      "WAN_IP=$WAN_IP"
      "P2P_PORT=$P2P_PORT"
      "API_PORT=$API_PORT"
      "RPC_SEPOLIA=$RPC_SEPOLIA"
      "BEACON_SEPOLIA=$BEACON_SEPOLIA"
      "PRIVATE_KEY=$PRIVATE_KEY"
      "PROVER_ID=$PROVER_ID"
      "AGENT_COUNT=$AGENT_COUNT"
      "DATA_DIR=$DATA_DIR"
    )

    echo "üîÑ .env hi·ªán t·∫°i:"
    for i in "${!env_lines[@]}"; do
      key="${env_lines[$i]%%=*}"
      val="${env_lines[$i]#*=}"
      [[ "$key" == "PRIVATE_KEY" ]] && val="********"
      printf "%2d. %-3s %-15s = %s\n" "$((i+1))" "${ICONS[$key]}" "$key" "$val"
    done

    echo ""
    CHOICE=$(printf "‚úÖ C√≥\n‚ùå Kh√¥ng" | fzf --prompt="üîÅ B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a c√°c bi·∫øn m√¥i tr∆∞·ªùng? " --height=10 --reverse)
    fzf_status=$?
    if [[ $fzf_status -ne 0 ]]; then
      echo "üîô B·∫°n ƒë√£ hu·ª∑. Quay l·∫°i menu ch√≠nh..."
      return 1
    fi

    if [[ "$CHOICE" == "‚úÖ C√≥" ]]; then
      while true; do
        echo ""
        echo "üîØ Ch·ªçn bi·∫øn c·∫ßn thay ƒë·ªïi:"
        display_lines=()
        for line in "${env_lines[@]}"; do
          key="${line%%=*}"
          val="${line#*=}"
          [[ "$key" == "PRIVATE_KEY" ]] && val="********"
          display_lines+=("${ICONS[$key]} $key=$val")
        done

        selected=$(printf "%s\n" "${display_lines[@]}" "üíæ L∆∞u v√† ti·∫øp t·ª•c" | fzf --prompt="üîß Ch·ªçn bi·∫øn: " --height=40% --reverse)
        fzf_status=$?

        if [[ $fzf_status -ne 0 ]]; then
          echo "üîô B·∫°n ƒë√£ hu·ª∑ ch·ªçn bi·∫øn, quay l·∫°i menu ch√≠nh..."
          return 1
        fi

        if [[ "$selected" == "üíæ L∆∞u v√† ti·∫øp t·ª•c" ]]; then
          break
        elif [[ -n "$selected" ]]; then
          key=$(echo "$selected" | awk '{print $2}' | cut -d'=' -f1)

          # T√¨m gi√° tr·ªã c≈©
          old_val=""
          for i in "${!env_lines[@]}"; do
            if [[ "${env_lines[$i]%%=*}" == "$key" ]]; then
              old_val="${env_lines[$i]#*=}"
              break
            fi
          done

          prompt_val="********"
          [[ "$key" != "PRIVATE_KEY" ]] && prompt_val="$old_val"

          # D√πng fzf ƒë·ªÉ nh·∫≠p gi√° tr·ªã m·ªõi v·ªõi print-query
          new_val=$(printf "" | fzf --prompt="üîß Nh·∫≠p gi√° tr·ªã m·ªõi cho $key (hi·ªán t·∫°i: $prompt_val): " --print-query --height=10 --border --reverse)
          fzf_status=$?
          if [[ $fzf_status -ne 0 ]]; then
            echo "üîô B·∫°n ƒë√£ hu·ª∑ nh·∫≠p gi√° tr·ªã, quay l·∫°i ch·ªçn bi·∫øn..."
            continue
          fi

          new_val="${new_val:-$old_val}"

          # C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã trong env_lines
          for i in "${!env_lines[@]}"; do
            if [[ "${env_lines[$i]%%=*}" == "$key" ]]; then
              env_lines[$i]="$key=$new_val"
            fi
          done
        fi
      done
    fi

  else
    echo "üìÑ T·∫°o file .env m·ªõi..."

    read -p "üñºÔ∏è Nh·∫≠p Docker image (m·∫∑c ƒë·ªãnh: aztecprotocol/aztec:0.87.8): " IMAGE
    IMAGE="${IMAGE:-aztecprotocol/aztec:0.87.8}"

    read -p "ü™ê Nh·∫≠p network (m·∫∑c ƒë·ªãnh: alpha-testnet): " NETWORK
    NETWORK="${NETWORK:-alpha-testnet}"

    read -p "üîç Nh·∫≠p Sepolia RPC URL: " RPC_SEPOLIA
    read -p "üîç Nh·∫≠p Beacon API URL: " BEACON_SEPOLIA
    read -s -p "üîê Nh·∫≠p Publisher Private Key: " PRIVATE_KEY
    echo ""
    read -p "üíº Nh·∫≠p Prover ID: " PROVER_ID
    read -p "üî¢ Nh·∫≠p s·ªë agent (m·∫∑c ƒë·ªãnh: 1): " AGENT_COUNT
    AGENT_COUNT="${AGENT_COUNT:-1}"

    read -p "üè† Nh·∫≠p P2P Port [m·∫∑c ƒë·ªãnh: $DEFAULT_P2P_PORT]: " P2P_PORT
    P2P_PORT="${P2P_PORT:-$DEFAULT_P2P_PORT}"

    read -p "üè† Nh·∫≠p API Port [m·∫∑c ƒë·ªãnh: $DEFAULT_API_PORT]: " API_PORT
    API_PORT="${API_PORT:-$DEFAULT_API_PORT}"

    read -p "üìÇ Nh·∫≠p th∆∞ m·ª•c l∆∞u d·ªØ li·ªáu [m·∫∑c ƒë·ªãnh: $DEFAULT_DATA_DIR]: " INPUT_DIR
    DATA_DIR="${INPUT_DIR:-$DEFAULT_DATA_DIR}"
    mkdir -p "$DATA_DIR"

    env_lines=(
      "IMAGE=$IMAGE"
      "NETWORK=$NETWORK"
      "WAN_IP=$WAN_IP"
      "P2P_PORT=$P2P_PORT"
      "API_PORT=$API_PORT"
      "RPC_SEPOLIA=$RPC_SEPOLIA"
      "BEACON_SEPOLIA=$BEACON_SEPOLIA"
      "PRIVATE_KEY=$PRIVATE_KEY"
      "PROVER_ID=$PROVER_ID"
      "AGENT_COUNT=$AGENT_COUNT"
      "DATA_DIR=$DATA_DIR"
    )
  fi

  echo ""
  echo "üíæ ƒêang ghi t·ªáp .env..."
  printf "%s\n" "${env_lines[@]}" > "$ENV_FILE"
  source "$ENV_FILE"
}

generate_compose() {
  COMPOSE_FILE="$DATA_DIR/docker-compose.yml"

  cat > "$COMPOSE_FILE" <<EOF
version: '3.8'
services:
  prover_node:
    image: $IMAGE
    container_name: prover_node
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-node --archiver --network $NETWORK'
    depends_on:
      broker:
        condition: service_started
    env_file:
      - .env
    environment:
      P2P_IP: "\${WAN_IP}"
      P2P_ANNOUNCE_ADDRESSES: "/ip4/\${WAN_IP}/tcp/\${P2P_PORT}"
      ETHEREUM_HOSTS: "\${RPC_SEPOLIA}"
      L1_CONSENSUS_HOST_URLS: "\${BEACON_SEPOLIA}"
      PROVER_PUBLISHER_PRIVATE_KEY: "\${PRIVATE_KEY}"
      PROVER_ENABLED: "true"
      P2P_ENABLED: "true"
      P2P_TCP_PORT: "\${P2P_PORT}"
      P2P_UDP_PORT: "\${P2P_PORT}"
      DATA_STORE_MAP_SIZE_KB: "134217728"
      LOG_LEVEL: "debug"
      PROVER_BROKER_HOST: "http://broker:\${API_PORT}"
    ports:
      - "\${API_PORT}:\${API_PORT}"
      - "\${P2P_PORT}:\${P2P_PORT}"
      - "\${P2P_PORT}:\${P2P_PORT}/udp"
    volumes:
      - \${DATA_DIR}/node:/data

  broker:
    image: $IMAGE
    container_name: broker
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-broker --network $NETWORK'
    env_file:
      - .env
    environment:
      DATA_DIRECTORY: /data
      ETHEREUM_HOSTS: "\${RPC_SEPOLIA}"
      LOG_LEVEL: "debug"
    volumes:
      - \${DATA_DIR}/broker:/data
EOF

  for i in $(seq 1 "$AGENT_COUNT"); do
    cat >> "$COMPOSE_FILE" <<EOF

  agent_$i:
    image: $IMAGE
    container_name: agent_$i
    entrypoint: >
      sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start
      --prover-agent --network $NETWORK'
    env_file:
      - .env
    environment:
      PROVER_ID: "\${PROVER_ID}"
      PROVER_BROKER_HOST: "http://broker:\${API_PORT}"
      PROVER_AGENT_POLL_INTERVAL_MS: "10000"
    depends_on:
      - broker
    restart: unless-stopped
EOF
  done
}

install_prover() {
  load_env_or_prompt || return

  install_dependencies
  check_and_install_docker
  generate_compose

  echo ""
  echo "üöÄ Kh·ªüi ƒë·ªông container..."
  cd "$DATA_DIR"
  $(compose_cmd) up -d

  echo ""
  echo "üéâ Ho√†n t·∫•t tri·ªÉn khai t·∫°i: $DATA_DIR"
}

view_logs() {
  echo "üìú Running Aztec Prover Logs..."

  [ -f "$DEFAULT_DATA_DIR/.env" ] && source "$DEFAULT_DATA_DIR/.env"
  if [ -z "$DATA_DIR" ] || [ ! -d "$DATA_DIR" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c DATA_DIR: $DATA_DIR"
    return
  fi

  cd "$DATA_DIR" || { echo "‚ùå Kh√¥ng th·ªÉ cd v√†o $DATA_DIR"; return; }

  CONTAINERS=$(docker ps --format "{{.Names}}" || true)
  HAS_PROVER=$(echo "$CONTAINERS" | grep -E "^(prover_node|broker)$" || true)
  HAS_AGENTS=$(echo "$CONTAINERS" | grep -E "^agent_[0-9]+$" || true)

  if [ -z "$CONTAINERS" ]; then
    echo "‚ùå Kh√¥ng c√≥ container n√†o ƒëang ch·∫°y!"
    return
  fi

  if command -v docker-compose &>/dev/null; then CMD="docker-compose"; else CMD="docker compose"; fi

  while true; do
    OPTIONS=""
    [ -n "$HAS_PROVER" ] && OPTIONS+="üîé Logs c·ªßa prover_node & broker\n"
    [ -n "$HAS_AGENTS" ] && OPTIONS+="üßë‚ÄçüöÄ Logs c·ªßa c√°c agent_*\n"
    OPTIONS+="üßæ View all logs"

    SELECTED=$(echo -e "$OPTIONS" | fzf --height=12 --border --prompt="üîç Ch·ªçn c√°ch xem logs: " --reverse) || return

    case "$SELECTED" in
      "üîé Logs c·ªßa prover_node & broker")
        (
          colors=(35 36)
          i=0
          pids=()
          for name in prover_node broker; do
            if docker ps --format '{{.Names}}' | grep -qx "$name"; then
              color=${colors[$i]}
              docker logs --tail=100 -f "$name" 2>&1 \
                | sed -u "s/^/\x1b[1;${color}m[$name]\x1b[0m /" &
              pids+=($!)
            fi
            ((i++))
          done
          trap 'kill "${pids[@]}" 2>/dev/null' SIGINT
          wait
        )
        ;;

      "üßë‚ÄçüöÄ Logs c·ªßa c√°c agent_*")
        (
          colors=(31 32 33 34 35 36 91 92 93 94)
          i=0
          pids=()
          for container in $HAS_AGENTS; do
            color=${colors[$((i % ${#colors[@]}))]}
            docker logs --tail=100 -f "$container" 2>&1 \
              | sed -u "s/^/\x1b[1;${color}m[$container]\x1b[0m /" &
            pids+=($!)
            ((i++))
          done
          trap 'kill "${pids[@]}" 2>/dev/null' SIGINT
          wait
        )
        ;;

      "üßæ View all logs")
        $CMD -f "$DATA_DIR/docker-compose.yml" logs --tail=100 -f
        ;;
    esac

    # Sau m·ªói l·∫ßn xem logs xong (Ctrl+C), quay l·∫°i menu ch·ªçn ki·ªÉu logs
  done
}

delete_prover() {
  echo "‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° container Prover kh√¥ng?"
  CHOICE=$(printf "‚úÖ C√≥\n‚ùå Kh√¥ng" | fzf --prompt="üëâ Ch·ªçn: " --height=6 --border --reverse)

  if [[ "$CHOICE" == "‚úÖ C√≥" ]]; then
    source "$DEFAULT_DATA_DIR/.env" 2>/dev/null
    DATA_DIR=${DATA_DIR:-$DEFAULT_DATA_DIR}
    if [ -d "$DATA_DIR" ]; then
      cd "$DATA_DIR" && $(compose_cmd) down -v
      echo "üßπ ƒê√£ xo√° container Prover."
    else
      echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ªØ li·ªáu: $DATA_DIR"
    fi
  else
    echo "‚ùé ƒê√£ hu·ª∑ thao t√°c xo√° container."
  fi
}

reset_prover() {
  echo "üí£ B·∫°n s·∫Øp xo√° to√†n b·ªô container v√† d·ªØ li·ªáu!"
  CHOICE=$(printf "‚úÖ C√≥, reset to√†n b·ªô\n‚ùå Kh√¥ng" | fzf --prompt="üëâ Ch·ªçn: " --height=6 --border --reverse)

  if [[ "$CHOICE" == "‚úÖ C√≥, reset to√†n b·ªô" ]]; then
    delete_prover
    if [ -d "$DEFAULT_DATA_DIR" ]; then
      echo "üóëÔ∏è ƒêang xo√° d·ªØ li·ªáu t·∫°i: $DEFAULT_DATA_DIR"
      rm -rf "$DEFAULT_DATA_DIR"
      echo "‚úÖ Reset ho√†n t·∫•t."
    else
      echo "‚ö†Ô∏è Th∆∞ m·ª•c d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i: $DEFAULT_DATA_DIR (b·ªè qua xo√°)"
    fi
  else
    echo "‚ùé ƒê√£ hu·ª∑ thao t√°c reset."
  fi
}

# ---------- Menu ----------
while true; do
  echo ""
  echo "=============================="
  echo "üõ† AZTEC PROVER DEPLOYMENT TOOL"
  echo "=============================="

  OPTION=$(printf \
"üöÄ C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Prover\n\
üìú Xem logs\n\
üßπ Xo√° Prover\n\
üí£ Xo√° to√†n b·ªô d·ªØ li·ªáu (reset)\n\
‚ùå Tho√°t" | fzf --height=12 --border --prompt="üëâ Ch·ªçn t√πy ch·ªçn: " --ansi --reverse)

  # N·∫øu ng∆∞·ªùi d√πng b·∫•m ESC ho·∫∑c Ctrl+C, tho√°t menu lu√¥n
  if [[ $? -ne 0 ]]; then
    echo "üëã Tho√°t..."
    exit 0
  fi

  case "$OPTION" in
    "üöÄ C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Prover") install_prover ;;
    "üìú Xem logs") view_logs ;;
    "üßπ Xo√° Prover") delete_prover ;;
    "üí£ Xo√° to√†n b·ªô d·ªØ li·ªáu (reset)") reset_prover ;;
    "‚ùå Tho√°t") echo "üëã T·∫°m bi·ªát!"; exit 0 ;;
    *) echo "‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá!" ;;
  esac
done
